***Largest number code***:

.model small
.data
array DW 997H,1009H,1008H,1003H,998H
M1 db 10,13,"largest no is:$"
largeno dw 0 

.code
mov ax,@data
mov ds,ax
mov cx,05
mov si,offset array
mov ax,[si]
dec cx
up:inc si  

inc si
cmp ax,[si]
jnc next
mov ax,[si] 

next:
loop up
mov largeno,ax
mov ah,09
lea dx,M1
int 21h  

MOV bx,largeno
AND BH,0F0H
MOV CL,4
SHR BH,CL
ADD BH,30H
MOV DL,BH
MOV AH,02
INT 21H 

MOV BX,largeno
AND BH,0FH
ADD BH,30H
MOV DL,BH
MOV AH,02
INT 21H   

MOV BX,largeno
AND BL,0F0H
MOV CL,4
SHR BL,CL
ADD BL,30H
MOV DL,BL
MOV AH,02
INT 21H     

MOV BX,largeno
AND BL,0FH
ADD BL,30H
MOV DL,BL
MOV AH,02   

INT 21H
mov ah,4ch
int 21h     

ends
end


***Smallest number code***:

.model small
.data
array DW 1004H,1009H,1020H,1230H,2349H
M1 db 10,13,"smallest no is:$"
smallno dw 0

.code
mov ax,@data
mov ds,ax
mov cx,05
mov si,offset array
mov ax,[si]
dec cx  

up:inc si
inc si
cmp ax,[si]
jc next
mov ax,[si]

next:
loop up
mov smallno,ax
mov ah,09
lea dx,M1
int 21h   

MOV bx,smallno
AND BH,0F0H
MOV CL,4
SHR BH,CL
ADD BH,30H
MOV DL,BH
MOV AH,02
INT 21H   

MOV BX,smallno
AND BH,0FH
ADD BH,30H
MOV DL,BH
MOV AH,02
INT 21H   

MOV BX,smallno
AND BL,0F0H
MOV CL,4
SHR BL,CL
ADD BL,30H
MOV DL,BL
MOV AH,02
INT 21H   

MOV BX,smallno
AND BL,0FH
ADD BL,30H
MOV DL,BL
MOV AH,02
INT 21H   

mov ah,4ch
int 21h   

ends
end









Theory:
In this program, we need to find out the smallest element present in the array. This can be
achieved by maintaining a variable min which initially will hold the value of the first element.
Loop through the array by comparing the value of min with elements of the array. If any of the
element&#39;s value is less than min, store the value of the element in min.
In this program, we need to find out the greatest element present in the array. This can be
achieved by maintaining a variable max which initially will hold the value of the first element.
Loop through the array by comparing the value of max with elements of the array. If any of the
element&#39;s value is greater than max, store the value of the element in max.
The jc instruction leverages the carry flag to determine whether the comparison result indicates
that the current element is smaller than the stored smallest value.
 jc not_smaller is the key difference in this version of the program.
 jc instruction performs a conditional jump if the carry flag (CF) is set, which happens when
the value in AL is smaller than the value in BL after the cmp instruction.
 If CF is set, the not_smaller label is jumped to, indicating that the current element is not
smaller than the stored smallest value
jc (jump if carry) instruction in an assembly program to find the largest number in a given array.
By comparing values and using the carry flag, the program efficiently determines whether the
current element is larger than the current largest value. This approach showcases how different
conditional jumps can be used to control program flow based on comparison results.
The LOOP instruction is a control flow instruction in the x86 assembly language, including the
Intel 8086 instruction set. It&#39;s used for creating loops and iterating through a block of code a
specified number of times. The LOOP instruction relies on the CX (counter) register to control
the loop&#39;s execution.

Functions and Interrupts:
1. Display message on screen.

Mov ah,09
Lea dx, msg
Int 21h
2. Enter single char from user.
Mov Ah,01
Int 21h
Return : AL= ASCII value
3. Display single char on screen.
Mov Ah,02
Int 21h
